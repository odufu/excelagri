swagger: "2.0"
info:
  description: "API documentation for EXCEL AGRI"
  version: "1.0.0"
  title: "EXCEL AGRII"

host: "excelagri.onrender.com"
basePath: "/api/v1"

tags:
  - name: "Authentication"
    description: "Authentication-related endpoints"
  - name: "Users"
    description: "User-related endpoints"
  - name: "Products"
    description: "Product-related endpoints"
  - name: "Brand"
    description: "Brand-related endpoints"
  - name: "Category"
    description: "Category-related endpoints"

securityDefinitions:
  Bearer:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    description: "JWT token for authorization. Format: 'Bearer {token}'"

paths:
  /auth/signup:
    post:
      tags:
        - "Authentication"
      summary: "Register a new user"
      description: "Endpoint to register a new user"
      parameters:
        - in: "body"
          name: "body"
          description: "User registration details"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Joel Odufu"
              email:
                type: "string"
                example: "joeltest@gmail.com"
              password:
                type: "string"
                example: "joeltest@gmail.com"
      responses:
        "200":
          description: "User registered successfully"

  /auth/verifyOTP:
    post:
      tags:
        - "Authentication"
      summary: "Verify OTP"
      description: "Verify OTP for user registration"
      parameters:
        - in: "body"
          name: "body"
          description: "OTP code for verification"
          required: true
          schema:
            type: "object"
            properties:
              otpCode:
                type: "string"
                example: "498007"
      responses:
        "200":
          description: "OTP verified successfully"

  /auth/login:
    post:
      tags:
        - "Authentication"
      summary: "Login"
      description: "Authenticate user login"
      parameters:
        - in: "body"
          name: "body"
          description: "User login details"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "joeltest@gmail.com"
              password:
                type: "string"
                example: "joeltest@gmail.com"
      responses:
        "200":
          description: "User logged in successfully"

  /auth/forgotPassword:
    post:
      tags:
        - "Authentication"
      summary: "Forgot Password"
      description: "Initiate password reset"
      parameters:
        - in: "body"
          name: "body"
          description: "Email for password reset"
          required: true
          schema:
            type: "object"
            properties:
              email:
                type: "string"
                example: "joeltest@gmail.com"
      responses:
        "200":
          description: "Password reset link sent"

  /auth/resetpassword:
    post:
      tags:
        - "Authentication"
      summary: "Reset Password"
      description: "Reset user password"
      parameters:
        - in: "body"
          name: "body"
          description: "New password details"
          required: true
          schema:
            type: "object"
            properties:
              otpCode:
                type: "string"
                example: "960957"
              password:
                type: "string"
                example: "Joelleeee"
              passwordConfirm:
                type: "string"
                example: "lee"
      responses:
        "200":
          description: "Password reset successfully"

# Users route with authorization

  /user/getusers:
    get:
      tags:
        - "Users"
      summary: "Get all users"
      description: "Fetches a list of all users."
      security:
        - Bearer: []
      responses:
        "200":
          description: "A list of users retrieved successfully"

  /user/getprofile/{id}:
    get:
      tags:
        - "Users"
      summary: "Get user profile by ID"
      description: "Fetches the profile of a user by their ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "6732247b134b14d663c65b3b"
      responses:
        "200":
          description: "User profile retrieved successfully"

  /user/admin/users:
    get:
      tags:
        - "Users"
      summary: "Get users by type"
      description: "Fetches users by type (individual, admin, super user) based on query."
      security:
        - Bearer: []
      parameters:
        - name: "type"
          in: "query"
          required: true
          type: "string"
          enum: ["individual", "admin", "super user"]
          example: "admin"
      responses:
        "200":
          description: "Filtered users retrieved successfully"

  /user/editprofile/{id}:
    put:
      tags:
        - "Users"
      summary: "Edit user profile"
      description: "Edits the profile of a user by their ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "6732247b134b14d663c65b3b"
        - in: "body"
          name: "body"
          description: "User profile details to edit"
          required: true
          schema:
            type: "object"
            properties:
              name:
                type: "string"
                example: "Ekowoicho Lee"
      responses:
        "200":
          description: "User profile updated successfully"

  /user/activities:
    get:
      tags:
        - "Users"
      summary: "Get all user activities"
      description: "Fetches all activities of users in the application."
      security:
        - Bearer: []
      responses:
        "200":
          description: "User activities retrieved successfully"

  # Products Endpoints (with token authorization)

  /product/postproduct:
    post:
      tags:
        - "Products"
      summary: "Create a new product"
      description: "Endpoint to create a new product"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          description: "Product details"
          required: true
          schema:
            type: "object"
            properties:
              Name:
                type: "string"
                example: "Shoe of shoes"
              Description:
                type: "string"
                example: "the best of all"
              images:
                type: "string"
                example: "image file location"
              _user:
                type: "string"
                example: "673210c83dece75cc279bfd1"
      responses:
        "200":
          description: "Product created successfully"

  /product/getproducts:
    get:
      tags:
        - "Products"
      summary: "Get all products"
      description: "Fetches a list of all products."
      security:
        - Bearer: []
      responses:
        "200":
          description: "A list of products retrieved successfully"

  /product/getproduct/{id}:
    get:
      tags:
        - "Products"
      summary: "Get a single product by ID"
      description: "Fetches a product by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "6732157e18c48e55aa0e55df"
      responses:
        "200":
          description: "Product retrieved successfully"

  /product/editproduct/{id}:
    put:
      tags:
        - "Products"
      summary: "Edit a specific product by ID"
      description: "Edits the details of a product by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "6732157e18c48e55aa0e55df"
        - in: "body"
          name: "body"
          description: "Updated product details"
          required: true
          schema:
            type: "object"
            properties:
              Name:
                type: "string"
                example: "Shoe of shoes"
              Description:
                type: "string"
                example: "the best of all"
              images:
                type: "string"
                example: "jhhhhhhhhhh"
      responses:
        "200":
          description: "Product updated successfully"

  /product/deleteproduct/{id}:
    delete:
      tags:
        - "Products"
      summary: "Delete a product by ID"
      description: "Deletes a product by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "6732157e18c48e55aa0e55df"
      responses:
        "200":
          description: "Product deleted successfully"

  # Brand Endpoints (with token authorization)

  /brand/postBrand:
    post:
      tags:
        - "Brand"
      summary: "Create a new brand"
      description: "Endpoint to create a new brand"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          description: "Brand details"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "Sednoo"
              Description:
                type: "string"
                example: "for Shoes Only"
              image:
                type: "string"
                example: "image file location"
      responses:
        "200":
          description: "Brand created successfully"

  /brand/getbrands:
    get:
      tags:
        - "Brand"
      summary: "Get all brands"
      description: "Fetches a list of all brands."
      security:
        - Bearer: []
      responses:
        "200":
          description: "A list of brands retrieved successfully"

  /brand/getbrand/{id}:
    get:
      tags:
        - "Brand"
      summary: "Get a single brand by ID"
      description: "Fetches a brand by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "67321b503a91f6b6e26b84c3"
      responses:
        "200":
          description: "Brand retrieved successfully"

  /brand/editBrand/{id}:
    put:
      tags:
        - "Brand"
      summary: "Edit a specific brand by ID"
      description: "Edits the details of a brand by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "67321b503a91f6b6e26b84c3"
        - in: "body"
          name: "body"
          description: "Updated brand details"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "Sednoo"
              Description:
                type: "string"
                example: "for Shoes Only"
              image:
                type: "string"
                example: "image file location"
      responses:
        "200":
          description: "Brand updated successfully"

  /brand/deletebrand/{id}:
    delete:
      tags:
        - "Brand"
      summary: "Delete a brand by ID"
      description: "Deletes a brand by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "67321b503a91f6b6e26b84c3"
      responses:
        "200":
          description: "Brand deleted successfully"

# Category Endpoints (with token authorization)

  /cartegory/postcartegory:
    post:
      tags:
        - "Category"
      summary: "Create a new category"
      description: "Endpoint to create a new category"
      security:
        - Bearer: []
      parameters:
        - in: "body"
          name: "body"
          description: "Category details"
          required: true
          schema:
            type: "object"
            properties:
              Title:
                type: "string"
                example: "Locals Ulogy"
              Description:
                type: "string"
                example: "for Shoes Only"
              image:
                type: "string"
                example: "image file location"
      responses:
        "200":
          description: "Category created successfully"

  /cartegory/getcartegorys:
    get:
      tags:
        - "Category"
      summary: "Get all categories"
      description: "Fetches a list of all categories."
      security:
        - Bearer: []
      responses:
        "200":
          description: "A list of categories retrieved successfully"

  /cartegory/getcartegory/{id}:
    get:
      tags:
        - "Category"
      summary: "Get a single category by ID"
      description: "Fetches a category by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "673224e1134b14d663c65b44"
      responses:
        "200":
          description: "Category retrieved successfully"

  /cartegory/editcartegory/{id}:
    put:
      tags:
        - "Category"
      summary: "Edit a specific category by ID"
      description: "Edits the details of a category by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "673224e1134b14d663c65b44"
        - in: "body"
          name: "body"
          description: "Updated category details"
          required: true
          schema:
            type: "object"
            properties:
              title:
                type: "string"
                example: "Solderiti"
              Description:
                type: "string"
                example: "for the loved ones"
              image:
                type: "string"
                example: "image"
      responses:
        "200":
          description: "Category updated successfully"

  /cartegory/deletecartegory/{id}:
    delete:
      tags:
        - "Category"
      summary: "Delete a category by ID"
      description: "Deletes a category by its ID."
      security:
        - Bearer: []
      parameters:
        - name: "id"
          in: "path"
          required: true
          type: "string"
          example: "673224e1134b14d663c65b44"
      responses:
        "200":
          description: "Category deleted successfully"